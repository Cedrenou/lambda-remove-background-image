name: Deploy Lambda Remove Background

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm i
      
    - name: Create deployment package
      run: |
        zip -r lambda-remove-background.zip . -x "*.git*" "README.md" ".github/*" "node_modules/.cache/*"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to AWS Lambda
      run: |
        # Vérifier si la fonction existe déjà
        if aws lambda get-function --function-name lambda-sunset-remove-background-image 2>/dev/null; then
          echo "Mise à jour de la fonction existante..."
          aws lambda update-function-code \
            --function-name lambda-sunset-remove-background-image \
            --zip-file fileb://lambda-remove-background.zip
        else
          echo "Création d'une nouvelle fonction..."
          aws lambda create-function \
            --function-name lambda-sunset-remove-background-image \
            --runtime nodejs18.x \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --handler index.handler \
            --zip-file fileb://lambda-remove-background.zip \
            --timeout 60 \
            --memory-size 512 \
            --environment Variables="{PHOTOROOM_API_KEY=${{ secrets.PHOTOROOM_API_KEY }}}"
        fi
        
    - name: Update Lambda environment variables
      run: |
        aws lambda update-function-configuration \
          --function-name lambda-sunset-remove-background-image \
          --environment Variables="{PHOTOROOM_API_KEY=${{ secrets.PHOTOROOM_API_KEY }}}"
          
    - name: Setup S3 trigger (if needed)
      run: |
        # Vérifier si le trigger existe déjà
        if ! aws lambda list-event-source-mappings --function-name remove-background-image --query 'EventSourceMappings[0]' --output text | grep -q 'None'; then
          echo "Trigger S3 déjà configuré"
        else
          echo "Configuration du trigger S3..."
          aws lambda add-permission \
            --function-name remove-background-image \
            --principal s3.amazonaws.com \
            --statement-id s3-trigger \
            --action lambda:InvokeFunction \
            --source-arn arn:aws:s3:::${{ secrets.S3_BUCKET_NAME }} || true
        fi 